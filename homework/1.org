#+latex_header: \usepackage{homework_template}
Due: September 18, 2019

* COMMENT
  Show steps for each problem except 1.2
** Problem 1.8.1
   Assume dynamic power P=1/2 CV^2F
** Problem 1.13
   "Consider a computer running a program that requires 250 s, with 70 s
   spent executing FP instructions, 85 s executed L/S instructions, and
   40 s spent executing branch instructions."
   
   This part is missing information, because if you add 70 and 85 and 40,
   you get 195 s. The total time is 250 s. The difference is 55 s,
   basically that is the time you spend on executing INT
   instructions. which the problem forgets to specify. Hope this
   explanation helps.

* 1.2
| Letter | Matching Idea                      |
|--------+------------------------------------|
| a      | Performance via Pipelining         |
| b      | Dependability via Redundancy       |
| c      | Performance via Prediction         |
| d      | Performance via Parallelism        |
| e      | Hierarchy of Memories              |
| f      | Make the Common Case Fast          |
| g      | Design for Moore's Law             |
| h      | Use Abstraction to Simplify Design |
 
* 1.5
#+BEGIN_SRC python :results output :exports both
import pint
from collections import namedtuple

unit = pint.UnitRegistry()
unit.define('cycles=')
unit.define('instructions=')

Processor = namedtuple('Processor', ['cyclesPerSecond', 'cyclesPerInstruction'])
processors = {
    'p1': Processor(3e9 * unit.cycles/unit.seconds, 1.5*unit.cycles/unit.instructions),
    'p2': Processor(2.5e9 * unit.cycles/unit.seconds, 1.5*unit.cycles/unit.instructions),
    'p3': Processor(4e9 * unit.cycles/unit.seconds, 1.5*unit.cycles/unit.instructions)}

programExecutionTime = 10 * unit.seconds
for name, processor in processors.items():
    performance = processor.cyclesPerSecond / processor.cyclesPerInstruction
    instructions = performance * programExecutionTime
    cycles = processor.cyclesPerSecond * programExecutionTime
    newClockRate = instructions*processor.cyclesPerInstruction*(1+0.2) / (programExecutionTime*(1-0.3))

    print((f"{name}:\n"
           f"  performance = {performance:.2E}\n"
           f"  instructions (#) = {instructions:.2E}\n"
           f"  cycles (#) = {cycles:.2E}\n"
           f"  new clock rate for 30% reduction in execution time = {newClockRate:.2E}"))
#+END_SRC

#+RESULTS:
#+begin_example
p1:
  performance = 2.00E+09 instructions / second
  instructions (#) = 2.00E+10 instructions
  cycles (#) = 3.00E+10 cycles
  new clock rate for 30% reduction in execution time = 5.14E+09 cycles / second
p2:
  performance = 1.67E+09 instructions / second
  instructions (#) = 1.67E+10 instructions
  cycles (#) = 2.50E+10 cycles
  new clock rate for 30% reduction in execution time = 4.29E+09 cycles / second
p3:
  performance = 2.67E+09 instructions / second
  instructions (#) = 2.67E+10 instructions
  cycles (#) = 4.00E+10 cycles
  new clock rate for 30% reduction in execution time = 6.86E+09 cycles / second
#+end_example
*** a.
    p3 has the highest performance at \(2.67\times 10^{9}\) instructions/second.
*** b.
    /refer to code results/
*** c. 
    /refer to code results/
* 1.8.1
| Equation ID | Processor Name               | Clock Rate | Voltage | Dynamic Power |
|-------------+------------------------------+------------+---------+---------------|
|           1 | Pentium 4 Prescott Processor | 3.6GHz     | 1.25V   | 90W           |
|           2 | Core i5 Ivy Bridge           | 3.4GHz     | 0.9V    | 40W           |

#+BEGIN_EXPORT latex
\begin{align*}
  P &= \frac{1}{2} CV^2F \to \\
  C &= \frac{P}{2V^2F} \\
  \alignedbox{C_1}{= \frac{90}{2\cdot 1.25^2\cdot 3.6\times 10^9} = 8\times 10^{-9} \si{F}}\\
  \alignedbox{C_2}{= \frac{40}{2\cdot 0.9^2\cdot 3.4\times 10^9} = 1.6\times 10^{-9} \si{F}}
\end{align*}
#+END_EXPORT

* 1.10.1 & 1.10.2
#+BEGIN_SRC python :results output :exports both
from collections import namedtuple
import pint
import math

def areaFromDiameter(diameter: float) -> float:
    radius = diameter/2
    return math.pi*radius**2 

unit = pint.UnitRegistry()
unit.define('defects=')

Wafer = namedtuple('Wafer', ['diameter', 'cost', 'dieCount', 'defectRatio'])                             
wafers = {
    'w1': Wafer(
        diameter = 15 * unit.cm,
        cost = 12,
        dieCount = 84,
        defectRatio = 0.020 * unit.defects/unit.cm**2),
    'w2': Wafer(
        diameter = 20 * unit.cm,
        cost = 15,
        dieCount = 100,
        defectRatio = 0.031 * unit.defects/unit.cm**2)
}

for name, wafer in wafers.items():
    waferArea = areaFromDiameter(wafer.diameter)
    dieArea = waferArea/wafer.dieCount
    
    waferYield = 1/(1+(wafer.defectRatio * dieArea/2))**2
    costPerDie = wafer.cost / (wafer.dieCount * waferYield)

    print((f"{name}:\n"
           f"  yield = {waferYield.magnitude:.3}\n"
           f"  cost per die = {costPerDie.magnitude:.3}\n"))
#+END_SRC

#+RESULTS:
: w1:
:   yield = 0.959
:   cost per die = 0.149
: 
: w2:
:   yield = 0.909
:   cost per die = 0.165
: 
* 1.11
** 1
** 2
** 3
** 4
* 1.12.1
* 1.13
