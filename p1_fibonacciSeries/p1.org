#+latex_class: article
#+latex_header: \usepackage{project}

#+title: Project 1: Fibonacci Series
#+author: Lewis Collum
#+date: October 25, 2019
#+latex_header: \newcommand{\course}{Fall 2019 - EE 466 Computer Architecture}
#+latex_header: \newcommand{\studentNumber}{0621539}
#+latex_header: \newcommand{\major}{EE/CE}
#+latex_header: \newcommand{\email}{colluml@clarkson.edu}

#+BEGIN_EXPORT latex
\begin{abstract}
  Generating a Fibonacci series is a popular introduction to recursive algorithms. Recursive algorithms are encapsulated by a function that calls itself. We will be exploring a simple Fibonacci algorithm in ARM assembly. While doing so, we will explore the ARM toolchains and QEMU emulation of an ARM device.
\end{abstract}
#+END_EXPORT

* Design
* Flow Chart
* Makefile Setup
** Makefile
   #+BEGIN_SRC makefile :tangle Makefile
NAME = p1
TOOLCHAIN = arm-none-eabi
LDFLAGS = -nostdlib

ASRC = p1.s
OBJ = $(SRC:.c=.o) $(ASRC:.s=.o)

all: $(NAME).bin

%.bin: %.elf
	$(TOOLCHAIN)-objcopy $< -O binary $@

.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	$(TOOLCHAIN)-ld $(LDFLAGS) $^ -o $@

%.o: %.s
	$(TOOLCHAIN)-as -o $@ $<

%.o: %.c
	$(TOOLCHAIN)-gcc $(CFLAGS) -c $< -o $@

%.list: %.o
	$(TOOLCHAIN)-objdump -d $< > $@

run: $(NAME).bin
	qemu-system-aarch64 \
		-M raspi2 \
		-m 1G \
		-no-reboot \
		-nographic \
		-monitor telnet:127.0.0.1:1234,server,nowait \
		-kernel $<
   #+END_SRC
* ARM Machine Setup
* Program
** Fibonacci in Assembly
#+BEGIN_SRC asm :tangle startup.S
    .section .vector_table, "x"
    .global _Reset
_Reset:
    b Reset_Handler
    b .
    b .
    b .
    b .
    b .
    b .
    b .

    .section .text
Reset_Handler:
    ldr r2, str1
    b .
str1: .word 0xDEADBEEF
#+END_SRC

** Interface in C
   #+BEGIN_SRC C :tangle p1.c
int main() {
  return 0;
}
   #+END_SRC
* Result
* Self-Evaluation
